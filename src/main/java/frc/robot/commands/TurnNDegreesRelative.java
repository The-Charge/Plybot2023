// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import com.ctre.phoenix.motorcontrol.ControlMode;

import edu.wpi.first.math.MathUtil;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.DriveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class TurnNDegreesRelative extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final DriveTrain m_driveTrain;
    private double m_nDegrees;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double finalDegrees;
    //private PIDController controller;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public TurnNDegreesRelative(double nDegrees, DriveTrain subsystem) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_nDegrees = nDegrees;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_driveTrain = subsystem;
        addRequirements(m_driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        // controller = new PIDController(0.01,0.001,0.0,0.02);
        // controller.enableContinuousInput(-180,180);
        // controller.setTolerance(1.0);
        // controller.setSetpoint(m_nDegrees);

        // m_driveTrain.setControlMode(ControlMode.PercentOutput);
        
        double degreesInitial = m_driveTrain.getDegrees(), dif = degreesInitial + m_nDegrees;
        // SmartDashboard.putNumber("Setpoint", m_nDegrees + degreesInitial);
        while(dif<0) {
            dif += 360;
        }
        while(dif>360) {
            dif-=360;
        }
        finalDegrees = dif;
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        // double output = controller.calculate(m_driveTrain.getGyroYaw());
        // MathUtil.clamp(output, -0.5, 0.5);
        // int sign = (int)Math.signum(output);
        // double minSpeed = 0.05;
        // output = sign*Math.max(minSpeed,Math.abs(output));
        // SmartDashboard.putNumber("output", output);
        // SmartDashboard.putNumber("Angle", m_driveTrain.getGyroYaw());
        // m_driveTrain.run(output,-1*output);
        SmartDashboard.putNumber("Final Degrees", finalDegrees);
        m_driveTrain.relTurn(finalDegrees, .6);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_driveTrain.stop();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        //return controller.atSetpoint();
        if(Math.abs(Math.abs(finalDegrees)-Math.abs(m_driveTrain.getDegrees()))<5) {
            return true;
        }  else {
            return false;
        }

    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
